///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;


using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

using System.Linq;
using OpenQA.Selenium;
using OpenQA.Selenium.Support;
using OpenQA.Selenium.Interactions;



namespace Ranorex_Browserstack
{
    public partial class InternetApp
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Mouse_Click_Target(RepoItemInfo inputtagInfo)
        {
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'inputtagInfo' at 217;20.", inputtagInfo);
            inputtagInfo.FindAdapter<InputTag>().Click("217;20");
        }

        public void Key_shortcut_Target(RepoItemInfo inputtagInfo)
        {
        	Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'Hello' with focus on 'ApplicationUnderTest.Target'.", repo.ApplicationUnderTest.TargetInfo, new RecordItemIndex(5));
        	repo.ApplicationUnderTest.Target.PressKeys("{CTRL}a{CTRL}");
//        	repo.ApplicationUnderTest.Target.PressKeys("{ControlKey down}{AKey}{ControlKey up}");
        	Delay.Milliseconds(100);
//        	repo.ApplicationUnderTest.Target.PressKeys("{SHIFT UP}");
//            Delay.Milliseconds(100);
        	repo.ApplicationUnderTest.Target.PressKeys("{DELETE}");
            Delay.Milliseconds(100);
            
//            Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey 'Ctrl+Shift+Left' Press with focus on 'inputtagInfo'.", inputtagInfo);
            Keyboard.PrepareFocus(inputtagInfo.FindAdapter<InputTag>());
            
//            Keyboard.Press(System.Windows.Forms.Keys.Left | System.Windows.Forms.Keys.Shift | System.Windows.Forms.Keys.Control, 75, Keyboard.DefaultKeyPressTime, 1, true);
        }
        public void Select_All_Text(){
        	var webDriverEndpoint = Host.Current.TryGetAsWebDriverEndpoint();
        	OpenQA.Selenium.IWebDriver existingDriver = webDriverEndpoint.WebDrivers.FirstOrDefault();
        	OpenQA.Selenium.IWebElement body_element = existingDriver.FindElement(By.Id("target"));
        	body_element.SendKeys(Keys.Control+"A");
        	//body_element.SendKeys(Keys.chord(Keys.Control,"a"));
        	
        }

    }
}
